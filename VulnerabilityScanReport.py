import subprocess
import xml.etree.ElementTree as ET
from datetime import datetime
import logging
import sys

# Set up logging
logging.basicConfig(
    level=logging.INFO,
    format="%(asctime)s - %(levelname)s - %(message)s",
    handlers=[logging.FileHandler("scanner.log"), logging.StreamHandler(sys.stdout)],
)

# Function to check if a command is available on the system
def is_command_available(command):
    try:
        subprocess.run([command, "--version"], stdout=subprocess.PIPE, stderr=subprocess.PIPE, check=True)
        return True
    except (subprocess.CalledProcessError, FileNotFoundError):
        return False

# Function to run Nmap scan
def run_nmap_scan(target):
    try:
        if not is_command_available("nmap"):
            logging.error("Nmap is not installed or not in the system PATH.")
            sys.exit(1)

        logging.info(f"Running Nmap scan on {target}...")
        command = f"nmap -oX nmap_scan.xml {target}"
        subprocess.run(command, shell=True, check=True)
        logging.info("Nmap scan completed.")
    except subprocess.CalledProcessError as e:
        logging.error(f"Nmap scan failed: {e}")
        sys.exit(1)

# Function to parse Nmap XML output
def parse_nmap_results():
    try:
        logging.info("Parsing Nmap results...")
        tree = ET.parse("nmap_scan.xml")
        root = tree.getroot()

        for host in root.findall("host"):
            ip = host.find("address").get("addr")
            logging.info(f"Host: {ip}")
            for port in host.findall("ports/port"):
                port_id = port.get("portid")
                service = port.find("service").get("name")
                logging.info(f"  Port: {port_id}, Service: {service}")
    except FileNotFoundError:
        logging.error("Nmap scan results not found. Ensure the scan completed successfully.")
    except ET.ParseError:
        logging.error("Failed to parse Nmap XML output.")

# Function to run OpenVAS scan
def run_openvas_scan(target):
    try:
        if not is_command_available("omp"):
            logging.error("OpenVAS (omp) is not installed or not in the system PATH.")
            sys.exit(1)

        logging.info(f"Running OpenVAS scan on {target}...")
        command = f"omp --username admin --password admin -X '<create_task><name>Scan</name><target><hosts>{target}</hosts></target></create_task>'"
        subprocess.run(command, shell=True, check=True)
        logging.info("OpenVAS scan completed.")
    except subprocess.CalledProcessError as e:
        logging.error(f"OpenVAS scan failed: {e}")
        sys.exit(1)

# Function to parse OpenVAS results
def parse_openvas_results():
    try:
        logging.info("Parsing OpenVAS results...")
        # Fetch OpenVAS results (replace <TASK_ID> with the actual task ID)
        command = 'omp --username admin --password admin -X \'<get_results task_id="<TASK_ID>"/>\' > openvas_results.xml'
        subprocess.run(command, shell=True, check=True)

        # Parse OpenVAS XML results
        tree = ET.parse("openvas_results.xml")
        root = tree.getroot()

        for result in root.findall("result"):
            vulnerability = result.find("name").text
            severity = result.find("severity").text
            description = result.find("description").text
            logging.info(f"Vulnerability: {vulnerability} (Severity: {severity})")
            logging.info(f"Description: {description}\n")

        return root  # Return parsed results for report generation
    except FileNotFoundError:
        logging.error("OpenVAS results not found. Ensure the scan completed successfully.")
    except ET.ParseError:
        logging.error("Failed to parse OpenVAS XML output.")
    except subprocess.CalledProcessError as e:
        logging.error(f"Failed to fetch OpenVAS results: {e}")

# Function to generate a report
def generate_report(openvas_results):
    try:
        timestamp = datetime.now().strftime("%Y%m%d_%H%M%S")
        report_name = f"vulnerability_report_{timestamp}.txt"
        with open(report_name, "w") as report:
            report.write("Vulnerability Scan Report\n")
            report.write("=========================\n")

            # Nmap Results
            report.write("Nmap Results:\n")
            tree = ET.parse("nmap_scan.xml")
            root = tree.getroot()
            for host in root.findall("host"):
                ip = host.find("address").get("addr")
                report.write(f"Host: {ip}\n")
                for port in host.findall("ports/port"):
                    port_id = port.get("portid")
                    service = port.find("service").get("name")
                    report.write(f"  Port: {port_id}, Service: {service}\n")

            # OpenVAS Results
            report.write("\nOpenVAS Results:\n")
            for result in openvas_results.findall("result"):
                vulnerability = result.find("name").text
                severity = result.find("severity").text
                description = result.find("description").text
                report.write(f"Vulnerability: {vulnerability} (Severity: {severity})\n")
                report.write(f"Description: {description}\n\n")

        logging.info(f"Report generated: {report_name}")
    except Exception as e:
        logging.error(f"Failed to generate report: {e}")

# Main function
def main():
    target = input("Enter the target IP or range: ")
    run_nmap_scan(target)
    parse_nmap_results()
    run_openvas_scan(target)
    openvas_results = parse_openvas_results()
    generate_report(openvas_results)

if __name__ == "__main__":
    main()